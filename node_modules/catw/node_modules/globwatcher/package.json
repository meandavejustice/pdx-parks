{
  "name": "globwatcher",
  "version": "1.2.2",
  "description": "watch a set of files for changes (including create/delete) by glob patterns",
  "keywords": [
    "watch"
  ],
  "author": {
    "name": "Robey Pointer",
    "email": "robeypointer@gmail.com"
  },
  "homepage": "https://github.com/robey/globwatcher",
  "repository": {
    "type": "git",
    "url": "git://github.com/robey/globwatcher.git"
  },
  "licenses": [
    {
      "type": "Apache License 2.0",
      "url": "http://www.apache.org/licenses/LICENSE-2.0.txt"
    }
  ],
  "scripts": {
    "test": "plz test -v --color"
  },
  "dependencies": {
    "coffee-script": "*",
    "glob": "*",
    "minimatch": "*",
    "q": "*"
  },
  "devDependencies": {
    "mocha": "*",
    "mocha-sprinkles": "*",
    "shelljs": "*",
    "should": "*",
    "touch": "*"
  },
  "main": "./lib/globwatcher",
  "files": [
    "build.plz",
    "lib",
    "test"
  ],
  "readme": "globwatcher\n===========\n\n[![Build Status](https://travis-ci.org/robey/globwatcher.png?branch=master)](https://travis-ci.org/robey/globwatcher)\n\nGlobwatcher is a node library that monitors a filesystem for changes to files\nspecified by glob patterns, and triggers events when a file is added, changed,\nor deleted. It's built on top of node's `fs.watch` mechanism, and uses the\nglob pattern syntax of the `glob` module.\n\nSample usage:\n\n```javascript\nvar globwatcher = require(\"globwatcher\").globwatcher;\nvar watcher = globwatcher(\"/albums/**/*.mp3\");\nwatcher.on(\"added\", function (filename) {\n  console.log(\"New MP3 detected: \" + filename);\n});\nwatcher.ready.then(function () {\n  console.log(\"Globwatcher is now actively scanning!\");\n});\n```\n\nAPI\n---\n\n### `globwatcher(patterns, options)`\n\nCreate a new `GlobWatcher` object, which will monitor for files that match\nthe given patterns (or a single pattern), and trigger events. The `options`\nobject can contain:\n\n- `cwd` - folder to use for relative patterns. If not given, the process's\n  current working directory is used. Absolute patterns (patterns that start\n  with \"/\") don't use this option.\n\n- `interval` - frequency (in milliseconds) to monitor existing files for\n  changes. Default is 250, or 1/4 second.\n\n- `debounceInterval` - delay (in milliseconds) to wait after receiving a\n  \"folder has changed\" notification before scanning the folder. This helps\n  alleviate thundering-herd problems where many files may be created or\n  deleted in a short period. Default is 10 milliseconds.\n\n- `snapshot` - previous state to resume from, as captured with `snapshot()`\n  (see \"Snapshots\" below).\n\n- `persistent` - if false, unref the watches so they don't keep node running.\n  Default is false.\n\n- `debug` - a function to call to log debug info while running. This function\n  will be called with a string to log whenever certain changes or events\n  occur, so it can be noisy, but may be useful for general debugging.\n\nUseful fields:\n\n- `ready` - a promise that will be fulfilled once all the watches have been\n  created and the initial scan is complete. This can be used to run code that\n  depends on globwatcher being active.\n\n- `originalPatterns` - the original (non-normalized) patterns used to create\n  this globwatcher, including any added with `add()`.\n\nUseful methods:\n\n- `add(patterns...)` - Add new glob patterns to be scanned. This will reset\n  the `ready` promise (described above) so that it's fulfilled only when this\n  new set of patterns are active.\n\n- `close()` - Stop monitoring and free all resources. No new events will be\n  sent after this call returns, and all \"watch\" resources will be freed.\n\n- `stopWatches()` - Stop monitoring temporarily. Pending events may still\n  arrive after this call returns, but no new events will be triggered, and\n  all \"watch\" resources will be freed. The watched patterns will be\n  remembered, so you can call `startWatches()` again to resume monitoring.\n\n- `startWatches()` - Resume monitoring after a `stopWatches()` call. You\n  don't need to call this function when first monitoring -- it's called by\n  the constructor automatically.\n\n- `check()` - Immediately scan interesting folders and files and trigger\n  events on changes. You don't need to call this function normally, but if\n  you believe files have changed, and want to bypass the normal scan\n  interval, this call may speed up the latency between a filesystem event and\n  the event signalled by globwatcher. Returns a promise that is fulfilled\n  when the check is finished.\n\n- `currentSet()` - Return the set of filenames that currently exist and match\n  the glob pattern being scanned. The filenames are all absolute.\n\n- `snapshot()` - Return an object representing the current state of watched\n  folders and files. (See \"Snapshots\" below.)\n\nEvents signalled:\n\n- `added(filename)` - a new file that matches one of the watched patterns was\n  created\n\n- `deleted(filename)` - a file that matches one of the watched patterns was\n  deleted\n\n- `changed(filename)` - a file that matches one of the watched patterns was\n  changed, either by modification time or size\n\nThe filename argument to events is always an absolute filename.\n\n### `new FileWatcher(options)`\n\nThe `FileWatcher` class is a pure-js replacement for the `fs.watchFile`\ninterface, with an extra `check` method. It's primarily an implementation\ndetail of globwatcher, but feel free to use it directly.\n\nA FileWatcher calls `fs.stat` on a set of files, on a recurring timer. If\nany of the files has a changed modification time or size, a \"changed\" event\nis signalled. File creation/deletion is ignored.\n\nThe `options` object can contain:\n\n- `period` - the period of the timer. Default is 250, or 1/4 second.\n\n- `persistent` - if false, unref the timer so that it doesn't keep node\n  running. Default is true.\n\nUseful methods:\n\n- `close()` - Stop the timer and clear the list of filenames being watched.\n\n- `watch(filename)` - Add this filename to the list being watched, if it\n  isn't already there. Returns the watch object for this filename.\n\n- `unwatch(filename)` - Remove this filename from the list being watched, if\n  it's there.\n\n- `watchFor(filename)` - Return the watch object for a filename, if it's\n  in the list of filenames benig watched. If not, return undefined.\n\n- `check()` - Immediately scan every filename currently being watched, and\n  trigger events on changes. This has the same purpose as the \"check\"\n  function on globwatcher.\n\nThe \"watch\" object returned by `watch` and `watchFor` has one function and\none event:\n\n- `check()` - Immediately scan this filename for changes.\n\n- `changed` - the event signalled when a file has changed\n\nHow it works\n------------\n\nnode (as of v0.10) provides two ways to \"watch\" files/folders for changes:\n\n- `fs.watchFile`, which calls `fs.stat` on the file at regular intervals\n- `fs.watch`, which tries to take advantage of OS-level file watching system\n  calls\n\nOf the two, `watch` seems most obviously the best, but is the least portable.\nLinux has the best support with inotify, but OS X still uses kqueue, and can\nonly notify when the contents of a folder have changed. Nested sub-folders\naren't monitored either.\n\nSo globwatch uses the minimatch library to parse the globs, and sets OS-level\nfolder watches on any interesting folders that exist. If a named folder\ndoesn't exist, it walks up the tree until it finds one that does exist,\nand watches that, looking for the subtree to be created.\n\nOS-level watches are only placed on folders, since they're the only ones\nguaranteed to work, and they only trigger a re-scan of the folder contents.\nAny matching filenames are watched with file-level watches, which are\nimplemented in `FileWatcher`.\n\nSnapshots\n---------\n\nThe current state of a globwatcher can be captured with `snapshot()`, which\nreturns an object containing metadata about files that currently match. This\nlets you \"resume\" a session later, potentially in a new process or at a much\nlater date.\n\nTo resume watching, pass the snapshot object as a `snapshot` option into a\nnew globwatcher:\n\n```javascript\nvar watcher = globwatcher(\"/albums/**/*.mp3\");\nvar snapshot = watcher.snapshot();\n// ... time passes ...\nval newWatcher = globwatcher(\"/albums/**/*.mp3\", { \"snapshot\": snapshot });\n```\n\nWhen restoring from a snapshot, globwatcher will wait for the debounce\ninterval to pass, then scan the filesystem and trigger events for any files\nthat have changed since the snapshot. (Naturally, this may have odd results\nif your match patterns have changed.)\n\nCaveats\n-------\n\nOn OS X, the modification time (\"mtime\") of files is only stored to the\nnearest second, so if a file is modified twice in one second, and stays the\nsame size, globwatch won't notice the second change. I can't think of a way to\nwork around this -- it's a limitation of the filesystem -- but I'm open to\nsuggestions.\n\nThe timer for file-level scanning determines how rapidly the \"change\" event\nwill trigger. At the default timer interval of 1/4 second, at the worst case,\nit may be 1/4 second between a file modification and the \"change\" event\ntriggering. If you've performed operations that might have caused files to\nchange, you can alleviate this somewhat by calling `check()` to cause an\nimmediate rescan.\n\nLicense\n-------\n\nApache 2 (open-source) license, included in 'LICENSE.txt'.\n\nAuthors\n-------\n\n@robey - Robey Pointer <robeypointer@gmail.com>\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/robey/globwatcher/issues"
  },
  "_id": "globwatcher@1.2.2",
  "dist": {
    "shasum": "95bbccd77fcfbca81c2716193a6d93d8a493aabe"
  },
  "_from": "globwatcher@~1.2.2",
  "_resolved": "https://registry.npmjs.org/globwatcher/-/globwatcher-1.2.2.tgz"
}
