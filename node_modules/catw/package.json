{
  "name": "catw",
  "version": "0.2.0",
  "description": "concatenate file globs, watching for changes",
  "main": "index.js",
  "bin": {
    "catw": "bin/cmd.js"
  },
  "dependencies": {
    "defined": "~0.0.0",
    "glob": "~3.2.7",
    "globwatcher": "~1.2.2",
    "minimist": "~0.0.5",
    "through": "~2.3.4",
    "stream-combiner": "~0.0.2",
    "shell-quote": "~1.4.0",
    "shallow-copy": "~0.0.1",
    "resolve": "~0.6.1"
  },
  "devDependencies": {
    "tape": "~2.3.0",
    "mkdirp": "~0.3.5",
    "concat-stream": "~1.2.0",
    "split": "~0.2.10",
    "brfs": "~0.0.8"
  },
  "scripts": {
    "test": "tape test/*.js"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/substack/catw.git"
  },
  "homepage": "https://github.com/substack/catw",
  "keywords": [
    "cat",
    "watch",
    "build",
    "concatenate",
    "css",
    "glob",
    "update",
    "recompile",
    "compile"
  ],
  "author": {
    "name": "James Halliday",
    "email": "mail@substack.net",
    "url": "http://substack.net"
  },
  "license": "MIT",
  "readme": "# catw\n\nconcatenate file globs, watching for changes\n\nThis module is just like the `cat` command, but with watching!\n\n[![build status](https://secure.travis-ci.org/substack/catw.png)](http://travis-ci.org/substack/catw)\n\n# example\n\n``` js\n#!/usr/bin/env node\n\nvar catw = require('catw');\nvar fs = require('fs');\n\ncatw('*.txt', function (stream) {\n    var w = stream.pipe(fs.createWriteStream('/tmp/bundle.txt'));\n    w.on('close', function () { console.log('wrote to /tmp/bundle.txt') });\n});\n```\n\nIf we run the program in a directory with files `a.txt` and `b.txt`, the\n`bundle.txt` output will be both files concatenated together (in string-order by\nfilename):\n\n```\nbeep\nboop\n```\n\nIf we edit `a.txt` to be `\"BEEP\"` instead of `\"beep\"`, the `bundle.txt` is now:\n\n```\nBEEP\nboop\n```\n\nand then if we add a third file `c.txt` with the contents `\"!!!\"`, the output is\nnow:\n\n```\nBEEP\nboop\n!!!\n```\n\nWe can even delete files. If we delete `b.txt`, the output is now:\n\n```\nBEEP\n!!!\n```\n\nIf we add a new file called `bloop.txt` with contents `\"BLOOP\"`, the\n`bundle.txt` output is now:\n\n```\nBEEP\nBLOOP\n!!!\n```\n\nbecause the glob expansions of directories are sorted before concatenating.\n\n# usage\n\nThere is a command-line `catw` command that ships with this package.\n\n```\nusage: catw {OPTIONS} [FILES...] -o OUTFILE\n\n  If FILES is \"-\", read from stdin.\n  If there is no OUTFILE, write to stdout and exit without watching.\n\n  OPTIONS:\n\n    -w, --watch      Watch for changes.\n                     Default: true except when writing to stdout.\n \n    -c, --command    Execute a transform command for file before concatenating.\n                     The env var $FILE will be set for each file path.\n \n    -t, --transform  Transform each file using a module.\n\n    -v, --verbose    Print the number of bytes written whenever a file changes.\n\n    -h, --help       Print this help message.\n\nMake sure to escape the globs that you want `catw` to watch so your shell won't\nexpand them.\n```\n\n# methods\n\n``` js\nvar catw = require('catw')\n```\n\n## var cat = catw(patterns, opts={}, cb)\n\nCreate a new `cat` to concatenate `patterns`, an array of strings or a single\nstring and watch each of the `patterns` for changes: new files, deleted files,\nand file updates.\n\nIt `opts.watch` is `false`, don't watch for changes, only concatenate once.\n\nYou can pass in a `opts.transform(file)` function that returns a transform\nstream to modify file contents before the contents are written to the bundle.\n\nIf specified, `cb(stream)` sets up a listener on the `'stream'` event.\n\n## cat.close()\n\nStop listening for updates to the `patterns`.\n\n# events\n\n## cat.on('stream', function (stream) {})\n\nEach time a file matched by a pattern changes or there is a new or deleted file\nmatched by a pattern, this event fires with a `stream` that will output the\nconcatenated file contents.\n\n# install\n\nTo get the module, with [npm](https://npmjs.org) do:\n\n```\nnpm install catw\n```\n\nand to get the `catw` command do:\n\n```\nnpm install -g catw\n```\n\n# test\n\nWith [npm](https://npmjs.org) do:\n\n```\nnpm test\n```\n\n# license\n\nMIT\n",
  "readmeFilename": "readme.markdown",
  "bugs": {
    "url": "https://github.com/substack/catw/issues"
  },
  "_id": "catw@0.2.0",
  "dist": {
    "shasum": "e1adff94f90f69bd4ae3b3d0c61471ba379c1e02"
  },
  "_from": "catw@^0.2.0",
  "_resolved": "https://registry.npmjs.org/catw/-/catw-0.2.0.tgz"
}
